apiVersion: v1
kind: Namespace
metadata:
  name: legitimate-app
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: legitimate-sa
  namespace: legitimate-app
---
# VaultAuth pour l'authentification Kubernetes
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: legitimate-auth
  namespace: legitimate-app
spec:
  vaultConnectionRef: vault-connection
  kubernetes:
    role: legitimate-app-role
    path: kubernetes
    mountPath: auth/kubernetes
---
# VaultDynamicSecret pour récupérer les secrets légitimes
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultDynamicSecret
metadata:
  name: legitimate-secrets
  namespace: legitimate-app
spec:
  mount: secret
  path: legitimate-app/config
  type: kv-v2
  vaultAuthRef: legitimate-auth
  destination:
    create: true
    name: legitimate-config
    type: kubernetes.io/opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: legitimate-app
  namespace: legitimate-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: legitimate-app
  template:
    metadata:
      labels:
        app: legitimate-app
    spec:
      serviceAccountName: legitimate-sa
      containers:
      - name: app
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "=== APPLICATION LÉGITIME DÉMARRÉE ==="
          echo "Lecture de mes propres secrets via VSO..."
          
          # Attendre que le secret Kubernetes soit créé par VSO
          while [ ! -f /vault/secrets/legitimate-config ]; do
            echo "Attente de mes secrets via VSO..."
            sleep 2
          done
          
          echo "Mes secrets trouvés via VSO !"
          echo ""
          echo "=== MES SECRETS (Application Légitime) ==="
          cat /vault/secrets/legitimate-config
          echo ""
          
          # Extraire les valeurs depuis le secret Kubernetes
          USERNAME=$(grep "^username=" /vault/secrets/legitimate-config | cut -d'=' -f2)
          PASSWORD=$(grep "^password=" /vault/secrets/legitimate-config | cut -d'=' -f2)
          API_KEY=$(grep "^apikey=" /vault/secrets/legitimate-config | cut -d'=' -f2)
          DB_URL=$(grep "^databaseurl=" /vault/secrets/legitimate-config | cut -d'=' -f2)
          
          echo "=== SECRETS RÉCUPÉRÉS VIA VSO ==="
          echo "Username: $USERNAME"
          echo "Password: $PASSWORD"
          echo "API Key: $API_KEY"
          echo "Database URL: $DB_URL"
          echo "========================="
          
          # Démarrer un serveur HTTP simple
          echo "Démarrage du serveur HTTP..."
          while true; do
            echo "HTTP/1.1 200 OK"
            echo "Content-Type: text/plain"
            echo ""
            echo "=== APPLICATION LÉGITIME (VSO) ==="
            echo "Status: Fonctionnel"
            echo "Mes secrets (via VSO):"
            echo "  Username: $USERNAME"
            echo "  Password: $PASSWORD"
            echo "  API Key: $API_KEY"
            echo "  Database URL: $DB_URL"
            echo "=================================="
            sleep 10
          done | nc -l -p 8080
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: vault-secrets
          mountPath: /vault/secrets
          readOnly: true
      volumes:
      - name: vault-secrets
        secret:
          secretName: legitimate-config
---
apiVersion: v1
kind: Service
metadata:
  name: legitimate-service
  namespace: legitimate-app
spec:
  selector:
    app: legitimate-app
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP 